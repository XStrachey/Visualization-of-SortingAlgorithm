/*BEGIN_OF_INSERTION_SORT*/
i ← 1
while i < length(A)
    j ← i
    while j > 0 and A[j-1] > A[j]
        swap A[j] and A[j-1]
        j ← j - 1
    end while
    i ← i + 1
end while
/*END_OF_INSERTION_SORT*/
/*BEGIN_OF_SHELL_SORT*/
i ← 1
while i < length(A)
    j ← i
    while j > 0 and A[j-1] > A[j]
        swap A[j] and A[j-1]
        j ← j - 1
    end while
    i ← i + 1
end while
/*END_OF_SHELL_SORT*/
/*BEGIN_OF_QUICK_SORT*/
algorithm quicksort(A, lo, hi) is
    if lo < hi then
        p := partition(A, lo, hi)
        quicksort(A, lo, p - 1 )
        quicksort(A, p + 1, hi)

algorithm partition(A, lo, hi) is
    pivot := A[hi]
    i := lo - 1
    for j := lo to hi - 1 do
        if A[j] < pivot then
            i := i + 1
            swap A[i] with A[j]
    swap A[i + 1] with A[hi]
    return i + 1
/*END_OF_QUICK_SORT*/
/*BEGIN_OF_BUBBLE_SORT*/
procedure bubbleSort( A : list of sortable items )
    n = length(A)
    repeat
        swapped = false
        for i = 1 to n-1 inclusive do
            /* if this pair is out of order */
            if A[i-1] > A[i] then
                /* swap them and remember something changed */
                swap( A[i-1], A[i] )
                swapped = true
            end if
        end for
    until not swapped
end procedure
/*END_OF_BUBBLE_SORT*/
/*BEGIN_OF_SHAKER_SORT*/
function shaker_sort(A: list[1..n]){
    for i from 0 to n/2{
        for f from i to (n-i-2){
            if(A[a] > A[a+1])
                swap(A[a],A[a+1])
        }
        for b from  (n-i-2) to (i+1){
            if(A[b]  A[b-1])
                swap(A[b],A[b-1]
        }
    }
}
/*END_OF_SHAKER_SORT*/
/*BEGIN_OF_SELECT_SORT*/
SelectSort (input ele[],input length)
    for i <- 1 to length step 1
        min <- i
        for j <- i+1 to length step 1
         if ele[j] < ele[min]
            min <- j
            end if
        swap(ele[j],ele[min])
    end
/*END_OF_SELECT_SORT*/
/*BEGIN_OF_BINARY_INSERT_SORT*/
BinInsertSort(int a[], int n) 
{ 
    int key, left, right, middle; 
    for (int i=1; i<n; i++) 
    { 
        key = a[i]; 
        left = 0; 
        right = i-1; 
        while (left<=right) 
        { 
        middle = (left+right)/2;
        if (a[middle]>key)
            right = middle-1;
        else 
            left = middle+1;
        }
        for(int j=i-1; j>=left; j--) 
        { 
            a[j+1] = a[j];
        }
        a[left] = key; 
    }
}
/*END_OF_BINARY_INSERT_SORT*/
/*BEGIN_OF_HEAP_SORT*/
procedure heapsort(a, count) is
    input: an unordered array a of length count

    (Build the heap in array a so that largest value is at the root)
    heapify(a, count)

    (The following loop maintains the invariants that a[0:end] is a heap and every element
     beyond end is greater than everything before it (so a[end:count] is in sorted order))
    end ← count - 1
    while end > 0 do
        (a[0] is the root and largest value. The swap moves it in front of the sorted elements.)
        swap(a[end], a[0])
        (the heap size is reduced by one)
        end ← end - 1
        (the swap ruined the heap property, so restore it)
        siftDown(a, 0, end)
/*END_OF_HEAP_SORT*/
/*BEGIN_OF_MERGE_SORT*/
merge(A,p,q,r):
    n1 <―― q-p+1
    n2 <―― r-q
    create array L[0,n1] and R[0,n2]
    for i <―― 0 to n1-1
        do L[i] <―― A[p+i]
    for j <―― 0 to n2-1
        do R[j] <―― A[q+j+1]
    L[n1] <―― +∞
    R[n2] <―― +∞
    i <―― 0
    j <―― 0
    for k i <―― p to r
        do if L[i]<=R[j]
            then A[k]  <―― L[i]
                 i <―― i+1
           else A[k] <―― R[j]
                 j <―― j+1
//通过调用merge完成排序：
merge_sort(A,p,r)：
    if p<r
       then q <―― [(p+r)/2] //向下取整
          merge_sort(A,p,q) //分治
          merge_sort(A,q+1,r)
          merge(A,p,q,r)    //合并结果
/*END_OF_MERGE_SORT*/
/*BEGIN_OF_RADIX_SORT*/
RADIX-SORT(A,d)
	for i=1 to d
		use a stable sort to sort arrat A on digit i
/*END_OF_RADIX_SORT*/
/*BEGIN_OF_COUNT_SORT*/
COUNTING-SORT（A, B, k）
    for i <- 0 to k
         do C[i] <- 0
    for i <- 0 to length(A)
         do C[A[i]] <- C[A[i]] +1
    for i <- 1 to k
         do C[i] <- C[i] + C[i-1]
    for i <- length(A) downto 1
         do B[C[A[i]]] <- A[i]
             C[A[i]] <- C[A[i]] -1   
/*END_OF_COUNT_SORT*/